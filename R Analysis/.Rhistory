1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
load("~/Dropbox/Reverse_Correlation/R Analysis/RawDataSet-Experiment3-CI.RData")
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(R.matlab)
library(ggplot2)
library(psych)
library(cowplot)
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 400))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 1000))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 50))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData <- mutate(ExperimentalData, RelIWCorGroup = cut(RelevantImageWiseCorrelation, quantile(RelevantImageWiseCorrelation,p = seq(0,1,length.out = 400))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor <- summarise(group_by(ExperimentalData, RelIWCorGroup, Condition), IWcor = mean(RelevantImageWiseCorrelation), pYes = mean(Response))
Active <- with(filter(Experimental_Summary_byRelIWCor,Condition=="Active", !is.na(RelIWCorGroup)), cor.test(pYes,IWcor))
Passive <- with(filter(Experimental_Summary_byRelIWCor,Condition=="Passive"), cor.test(pYes,IWcor))
print(r.test(n=Active$parameter+2, n2 = Passive$parameter+2, r12 = Active$estimate, r34 = Passive$estimate))
remove(Active, Passive)
print("Correlation for the Active Condition:")
with(filter(Experimental_Summary_byRelIWCor,Condition=="Active", !is.na(RelIWCorGroup)), cor.test(pYes,IWcor))
print("Correlation for the Passive Condition:")
with(filter(Experimental_Summary_byRelIWCor,Condition=="Passive"), cor.test(pYes,IWcor))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData <- mutate(ExperimentalData, RelIWCorGroup = cut(RelevantImageWiseCorrelation, quantile(RelevantImageWiseCorrelation,p = seq(0,1,length.out = 50))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor <- summarise(group_by(ExperimentalData, RelIWCorGroup, Condition), IWcor = mean(RelevantImageWiseCorrelation), pYes = mean(Response))
print("Correlation for the Active Condition:")
with(filter(Experimental_Summary_byRelIWCor,Condition=="Active", !is.na(RelIWCorGroup)), cor.test(pYes,IWcor))
print("Correlation for the Passive Condition:")
with(filter(Experimental_Summary_byRelIWCor,Condition=="Passive"), cor.test(pYes,IWcor))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData <- mutate(ExperimentalData, RelIWCorGroup = cut(RelevantImageWiseCorrelation, quantile(RelevantImageWiseCorrelation,p = seq(0,1,length.out = 1000))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor <- summarise(group_by(ExperimentalData, RelIWCorGroup, Condition), IWcor = mean(RelevantImageWiseCorrelation), pYes = mean(Response))
print("Correlation for the Active Condition:")
with(filter(Experimental_Summary_byRelIWCor,Condition=="Active", !is.na(RelIWCorGroup)), cor.test(pYes,IWcor))
print("Correlation for the Passive Condition:")
with(filter(Experimental_Summary_byRelIWCor,Condition=="Passive"), cor.test(pYes,IWcor))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 400))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
summary(fitmodelPas)
summary(fitmodelAct)
fitmodelAct$m
fitmodelAct$convInfo
fitmodelAct$control
fitmodelAct$data
fitmodelAct$dataClasses
fitmodelAct$call
fitmodelAct
(paramsAct[1] - paramsPas[1])/sqrt(6.665e-01^2 + 6.134e-01^2)
6.665e-01
(paramsAct[1] - paramsPas[1])/sqrt(6.665e-01^2 + 6.134e-01^2)
qnorm(13.22)
qnorm(4)
dnorm(4)
dnorm(13.22)
(paramsAct[2] - paramsPas[2])/sqrt(2.987e-04^2 + 4.824e-04^2)
p400 <- c(paramsAct,paramsPas)
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 1000))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 1000))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 50))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
#postscript("~/Dropbox/Thesis/Figures/IWcorCIexp3.eps", height = 5, pointsize = 16, horizontal = F)
par(mar=c(5,4,2,2)+0.1, oma=c(0,0,0,0))
with(filter(Experimental_Summary_byRelIWCor,Condition=="Active", !is.na(RelIWCorGroup)), plot(IWcor, pYes, pch=16, cex=0.5, ylim = c(0,1), xlim = c(-.12,.16), col = 'red', ylab = "Proportion of \"yes\" responses by participants", xlab = "Image-wise correlation between trial image and target image"))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"),lines(sort(IWcor), sort(predict(fitmodelAct)), col ='red'))
with(filter(Experimental_Summary_byRelIWCor,Condition=="Passive"), points(IWcor, pYes, pch=16, cex=0.5, col='blue'))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"),lines(sort(IWcor), sort(predict(fitmodelPas)), col ='blue'))
legend("topright", legend = levels(filter(TrainingDprimes, Experiment_Phase=='easy')$Condition), pch = c(15,15), pt.cex = c(2,2), col = c('red', 'blue'))
#dev.off()
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 50))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
#postscript("~/Dropbox/Thesis/Figures/IWcorCIexp3.eps", height = 5, pointsize = 16, horizontal = F)
par(mar=c(5,4,2,2)+0.1, oma=c(0,0,0,0))
with(filter(Experimental_Summary_byRelIWCor,Condition=="Active", !is.na(RelIWCorGroup)), plot(IWcor, pYes, pch=16, cex=0.5, ylim = c(0,1), xlim = c(-.12,.16), col = 'red', ylab = "Proportion of \"yes\" responses by participants", xlab = "Image-wise correlation between trial image and target image"))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"),lines(sort(IWcor), sort(predict(fitmodelAct)), col ='red'))
with(filter(Experimental_Summary_byRelIWCor,Condition=="Passive"), points(IWcor, pYes, pch=16, cex=0.5, col='blue'))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"),lines(sort(IWcor), sort(predict(fitmodelPas)), col ='blue'))
legend("topright", legend = levels(filter(TrainingDprimes, Experiment_Phase=='easy')$Condition), pch = c(15,15), pt.cex = c(2,2), col = c('red', 'blue'))
#dev.off()
#postscript("~/Dropbox/Thesis/Figures/IWcorCIexp3.eps", height = 5, pointsize = 16, horizontal = F)
par(mar=c(5,4,2,2)+0.1, oma=c(0,0,0,0))
with(filter(Experimental_Summary_byRelIWCor_CI,Condition=="Active", !is.na(RelIWCorGroup)), plot(IWcor, pYes, pch=16, cex=0.5, ylim = c(0,1), xlim = c(-.12,.16), col = 'red', ylab = "Proportion of \"yes\" responses by participants", xlab = "Image-wise correlation between trial image and target image"))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"),lines(sort(IWcor), sort(predict(fitmodelAct)), col ='red'))
with(filter(Experimental_Summary_byRelIWCor_CI,Condition=="Passive"), points(IWcor, pYes, pch=16, cex=0.5, col='blue'))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"),lines(sort(IWcor), sort(predict(fitmodelPas)), col ='blue'))
legend("topright", legend = levels(filter(TrainingDprimes, Experiment_Phase=='easy')$Condition), pch = c(15,15), pt.cex = c(2,2), col = c('red', 'blue'))
#dev.off()
#tag the images with similar IW correlations to group them later for aggregation
ExperimentalData_CI <- mutate(ExperimentalData, RelIWCorGroup = cut(CIImageWiseCorrelation, quantile(CIImageWiseCorrelation,p = seq(0,1,length.out = 1000))))
#use the RelIWCorGroup above to calculate probYes for each range of IW corrrelation
Experimental_Summary_byRelIWCor_CI <- summarise(group_by(ExperimentalData_CI, RelIWCorGroup, Condition), IWcor = mean(CIImageWiseCorrelation), pYes = mean(Response))
sigmoid = function(params, x) {
1/ (1 + exp(-params[1] * (x - params[2])))
}
fitmodelAct <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
fitmodelPas <- with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), nls(pYes~1/(1 + exp(-b * (IWcor-c))), start=list(b=10,c=0)))
# get the coefficients using the coef function
paramsPas=coef(fitmodelPas)
paramsAct=coef(fitmodelAct)
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), plot(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"), cor.test(sigmoid(paramsAct,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), plot(sigmoid(paramsPas,IWcor), pYes))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"), cor.test(sigmoid(paramsPas,IWcor), pYes))
#postscript("~/Dropbox/Thesis/Figures/IWcorCIexp3.eps", height = 5, pointsize = 16, horizontal = F)
par(mar=c(5,4,2,2)+0.1, oma=c(0,0,0,0))
with(filter(Experimental_Summary_byRelIWCor_CI,Condition=="Active", !is.na(RelIWCorGroup)), plot(IWcor, pYes, pch=16, cex=0.5, ylim = c(0,1), xlim = c(-.12,.16), col = 'red', ylab = "Proportion of \"yes\" responses by participants", xlab = "Image-wise correlation between trial image and target image"))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Active"),lines(sort(IWcor), sort(predict(fitmodelAct)), col ='red'))
with(filter(Experimental_Summary_byRelIWCor_CI,Condition=="Passive"), points(IWcor, pYes, pch=16, cex=0.5, col='blue'))
with(filter(Experimental_Summary_byRelIWCor_CI, Condition=="Passive"),lines(sort(IWcor), sort(predict(fitmodelPas)), col ='blue'))
legend("topright", legend = levels(filter(TrainingDprimes, Experiment_Phase=='easy')$Condition), pch = c(15,15), pt.cex = c(2,2), col = c('red', 'blue'))
#dev.off()
summary(fitmodelAct)
summary(fitmodelPas)
library("devtools")
install_git("https://github.com/OliverWS/CBSL.R")
install_github("https://github.com/OliverWS/CBSL.R", )
setOption("github.user", "PatrickLaflamme")
install_github("https://github.com/OliverWS/CBSL.R", )
install_github("/https://github.com/OliverWS/CBSL.R", )
install_github("patricklaflamme/https://github.com/OliverWS/CBSL.R", )
install_github("patricklaflamme/github.com/OliverWS/CBSL.R", )
install_github("github.com/OliverWS/CBSL.R", )
install_github("OliverWS/CBSL.R", )
install_github("https://github.com/OliverWS/CBSL.R.git")
install_git("https://github.com/OliverWS/CBSL.R.git")
install_git("https://github.com/OliverWS/CBSL.R.git", credentials = git2r::cred_user_pass("PatrickLaflamme", "Love2fish0"))
library(cbsl)
setwd("../../VizOliverRick/")
setwd("../12-8-16/")
read.eda("Ben_20CD_2016_12_08.csv")
analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv")
na.spline
library(zoo)
analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv")
library(Hmisc)
library(signal)
analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv")
library(systemfit)
analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv")
library(data.table)
analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv")
analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv",noPlots = T)
library(plyr)
analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv",noPlots = T)
test <- analyzeDyad("Ben_20CD_2016_12_08.csv", "Carly_20A3_2016_12_08.csv",window_size = 40, window_step = 1, noPlots = T)
tes <- as.dyad(read.eda("Ben_20CD_2016_12_08.csv"), read.eda("Carly_20A3_2016_12_08.csv"))
remove(test)
tsDescriptives(tes, fs=1)
tsDescriptives(tes, fs=32)
tsDescriptives(tes[,2], fs=32)
tsDescriptives(tes[,3], fs=32)
getFS(tes)
load("~/Dropbox/Reverse_Correlation/R Analysis/imagesExp1.RData")
library(R.matlab)
TargetIms <- readMat("targets4.mat")
TargX <- imager::as.cimg(TargetIms$x)
TargXI <- imager::as.cimg(TargetIms$xi)
TargPI <- imager::as.cimg(TargetIms$pi)
TargP <- imager::as.cimg(TargetIms$p)
remove(TargetIms)
calculate_CI_correlations <- function(fileDir, partData, EXPNAME='EXP1'){
}
calculate_CI_correlations <- function(fileDir, partData, EXPNAME='EXP1'){
#find the .mat files in the given directory.
files <- list.files(fileDir, full.names = T, pattern = ".mat")
#get all of the IDs to search the files for
IDs <- as.character(unique(interaction(partData$Participant_Number, partData$Session_Number, sep="_")))
images <- list()
#iterate through the IDs
for(ID in IDs){
#convert ID to numbers for accessing PartData
ParticipantNumber <- as.numeric(strsplit(ID, "_")[[1]][1])
SessionNumber <- as.numeric(strsplit(ID, "_")[[1]][2])
TargetID <- as.numeric(unique(filter(partData, Participant_Number == ParticipantNumber, Session_Number == SessionNumber)$Target_Type))
#select the relevant file.
file <- files[grep(paste("/",ID,".mat",sep=''), files)]
#load the relevant file.
data <- readMat(file)
#Discard data that isn't useful
data <- array(aperm(data$whitenoise,c(2,1,3)), c(2500,2000))
data <- data[,partData$Trial_Number[partData$Participant_Number==ParticipantNumber & partData$Session_Number==SessionNumber & partData$Experiment_Phase==" experimental"]]
responses <- partData$Response[partData$Participant_Number==ParticipantNumber & partData$Session_Number==SessionNumber & partData$Experiment_Phase==" experimental"]*2-1
data <- t(t(data) * responses)
if(SessionNumber==1){
assign(paste0('image', ParticipantNumber), as.matrix(rowSums(data), nrow=1))
}
else{
assign(paste0('image', ParticipantNumber), cbind(get(paste0('image', ParticipantNumber)), as.matrix(rowSums(data), nrow=1)))
toPNG <- imager::as.cimg(rowSums(get(paste0('image', ParticipantNumber))))
imager::save.image(toPNG, file = paste0("CIs/",EXPNAME,"/", ParticipantNumber, ".png"))
}
}
for(ID in IDs){
#convert ID to numbers for accessing PartData
ParticipantNumber <- as.numeric(strsplit(ID, "_")[[1]][1])
SessionNumber <- as.numeric(strsplit(ID, "_")[[1]][2])
TargetID <- as.numeric(unique(filter(partData, Participant_Number == ParticipantNumber, Session_Number == SessionNumber)$Target_Type))
#select the relevant file.
file <- files[grep(paste("/",ID,".mat",sep=''), files)]
#load the relevant file.
data <- readMat(file)
#Discard data that isn't useful
data <- array(aperm(data$whitenoise,c(2,1,3)), c(2500,2000))
#now calculate the correlations
CICorrelations <- apply(data, 2, cor, y=rowSums(get(paste0('image', ParticipantNumber))))
#incorrectCorrelations <- apply(data, 2, cor, y=incorrectTargetImage)
partData$CIImageWiseCorrelation[partData$Participant_Number==ParticipantNumber & partData$Session_Number==SessionNumber & partData$Experiment_Phase==" experimental"] <- CICorrelations[partData$Trial_Number[partData$Participant_Number==ParticipantNumber & partData$Session_Number==SessionNumber & partData$Experiment_Phase==" experimental"]]
}
images <- list(image1 = image1, image2=image2, image3=image3, image4 = image4, image5=image5, image6=image6, image7=image7, image8=image8, image9=image9)
save(file = "imagesExp1.RData", images)
return(partData)
}
Exp1X <- imager::as.cimg(rowSums(cbind(images$image1, images$image5)))
plot(TargX)
plot(TargX, asp=T)
corr2D::corr2d(Exp1X, TargX)
dim(Exp1X[,,1,1])
corr2D::corr2d(Exp1X[,,1,1], TargX[,,1,1])
cor(Exp1X[,,1,1], TargX[,,1,1])
cor(as.vector(Exp1X[,,1,1]), as.vector(TargX[,,1,1]))
cor(as.vector(Exp1X[,,1,1]), as.vector(TargXI[,,1,1]))
cor(as.vector(Exp1X[,,1,1]), as.vector(TargPI[,,1,1]))
cor(as.vector(Exp1X[,,1,1]), as.vector(TargP[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 2, gaussian = T)[,,1,1], as.vector(TargP[,,1,1]))
)
cor(as.vector(imager::isoblur(Exp1X, sigma = 2, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 2, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 2, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 2, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
imager::isoblur(Exp1X, sigma = 2, gaussian = T)[,,1,1]) %>% plot
imager::isoblur(Exp1X, sigma = 2, gaussian = T) %>% plot
library(dplyr)
imager::isoblur(Exp1X, sigma = 2, gaussian = T) %>% plot
imager::isoblur(Exp1X, sigma = 2, gaussian = T) %>% plot(asp=T)
imager::isoblur(Exp1X, sigma = 3, gaussian = T)[,,1,1]) %>% plot
imager::isoblur(Exp1X, sigma = 3, gaussian = T) %>% plot
imager::isoblur(Exp1X, sigma = 3, gaussian = T) %>% plot(asp=T)
imager::isoblur(Exp1X, sigma = 4, gaussian = T) %>% plot(asp=T)
imager::isoblur(Exp1X, sigma = 3, gaussian = T) %>% plot(asp=T
imager::isoblur(Exp1X, sigma = 4, gaussian = T) %>% plot(asp=T
imager::isoblur(Exp1X, sigma = 3, gaussian = T) %>% plot(asp=T)
imager::isoblur(Exp1X, sigma = 4, gaussian = T) %>% plot(asp=T)
cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
Correct_Target <- as.matrix(nrow=1, ncol=4)
Correct_Target <- matrix(nrow=1, ncol=4)
cor.test(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
colnames(Correct_Target) <- c("x","p","xi","pi")
Correct_Target[,1] <- cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['x',1] <- cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target <- matrix(nrow=4, ncol=4)
rownames(Correct_Target) <- c("x","p","xi","pi")
colnames(Correct_Target) <- c("Correct", "High Similarity", "Low Similarity")
Correct_Target['x',1] <- cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target <- matrix(nrow=4, ncol=3)
rownames(Correct_Target) <- c("x","p","xi","pi")
colnames(Correct_Target) <- c("Correct", "High Similarity", "Low Similarity")
Correct_Target <- matrix(nrow=4, ncol=4)
rownames(Correct_Target) <- c("x","p","xi","pi")
colnames(Correct_Target) <- c("Correct", "High Similarity", "Low Similarity 1", "Low Similarity 2")
Correct_Target['x',1] <- cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
View(Correct_Target)
Correct_Target['x',2] <-cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Exp1X <- imager::as.cimg(rowSums(cbind(images$image1, images$image5)))
Exp1P <- imager::as.cimg(rowSums(cbind(images$image2, images$image6)))
Exp1PI <- imager::as.cimg(rowSums(cbind(images$image3, images$image7)))
Exp1XI <- imager::as.cimg(rowSums(cbind(images$image4, images$image8)))
Correct_Target['x',1] <- cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['x',2] <-cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['x',3] <-cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['x',4] <-cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
Correct_Target['p',4] <- cor(as.vector(imager::isoblur(Exp1P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['p',3] <-cor(as.vector(imager::isoblur(Exp1P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['p',2] <-cor(as.vector(imager::isoblur(Exp1P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['p',1] <-cor(as.vector(imager::isoblur(Exp1P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
Correct_Target['pi',4] <- cor(as.vector(imager::isoblur(Exp1PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['pi',3] <-cor(as.vector(imager::isoblur(Exp1PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['pi',1] <-cor(as.vector(imager::isoblur(Exp1PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['pi',2] <-cor(as.vector(imager::isoblur(Exp1PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
#Calculations for 'xi' target
Correct_Target['xi',2] <- cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['xi',1] <-cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['xi',3] <-cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['xi',4] <-cor(as.vector(imager::isoblur(Exp1X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
sd(Correct_Target[,3:4])
sd(Correct_Target[,3:4])
mean(Correct_Target[,3:4]);sd(Correct_Target[,3:4])
Backwards_prediction_accuracy[,"Correct Target"] <- mean(Correct_Target[,1]);sd(Correct_Target[,1])
Backwards_prediction_accuracy <- matrix(nrow=2,ncol=3)
colnames(Backwards_prediction_accuracy) <- c("Correct Target", "High Similarity Target", "Low Similarity Target")
rownames(Backwards_prediction_accuracy) <- c("Mean", "SD")
Backwards_prediction_accuracy[,"Correct Target"] <- mean(Correct_Target[,1]);sd(Correct_Target[,1])
Backwards_prediction_accuracy[,"Correct Target"] <- c(mean(Correct_Target[,1]),sd(Correct_Target[,1]))
View(Backwards_prediction_accuracy)
Backwards_prediction_accuracy[,"High Similarity Target"] <- c(mean(Correct_Target[,2]),sd(Correct_Target[,2]))
Backwards_prediction_accuracy[,"Low Similarity Target"] <- c(mean(Correct_Target[,3:4]),sd(Correct_Target[,3:4]))
View(Backwards_prediction_accuracy)
Correct_TargetExp1 <- Correct_Target
load("imagesExp2.RData")
TargetIms <- readMat("targets4.mat")
TargX <- imager::as.cimg(TargetIms$x)
TargXI <- imager::as.cimg(TargetIms$xi)
TargPI <- imager::as.cimg(TargetIms$pi)
TargP <- imager::as.cimg(TargetIms$p)
remove(TargetIms)
Exp2X <- imager::as.cimg(rowSums(cbind(images$image1, images$image5)))
Exp2P <- imager::as.cimg(rowSums(cbind(images$image2, images$image6)))
Exp2PI <- imager::as.cimg(rowSums(cbind(images$image3, images$image7)))
Exp2XI <- imager::as.cimg(rowSums(cbind(images$image4, images$image8)))
Correct_Target <- matrix(nrow=4, ncol=4)
rownames(Correct_Target) <- c("x","p","xi","pi")
colnames(Correct_Target) <- c("Correct", "High Similarity", "Low Similarity 1", "Low Similarity 2")
#Calculations for 'x' target
Correct_Target['x',1] <- cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['x',2] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['x',3] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['x',4] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
#Calculations for 'p' target
Correct_Target['p',4] <- cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['p',3] <-cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['p',2] <-cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['p',1] <-cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
#Calculations for 'xi' target
Correct_Target['xi',2] <- cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['xi',1] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['xi',3] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['xi',4] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
#Calculations for 'pi' target
Correct_Target['pi',4] <- cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['pi',3] <-cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['pi',1] <-cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['pi',2] <-cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
Backwards_prediction_accuracy <- matrix(nrow=2,ncol=3)
colnames(Backwards_prediction_accuracy) <- c("Correct Target", "High Similarity Target", "Low Similarity Target")
rownames(Backwards_prediction_accuracy) <- c("Mean", "SD")
Backwards_prediction_accuracy[,"Correct Target"] <- c(mean(Correct_Target[,1]),sd(Correct_Target[,1]))
Backwards_prediction_accuracy[,"High Similarity Target"] <- c(mean(Correct_Target[,2]),sd(Correct_Target[,2]))
Backwards_prediction_accuracy[,"Low Similarity Target"] <- c(mean(Correct_Target[,3:4]),sd(Correct_Target[,3:4]))
load("imagesExp2.RData")
TargetIms <- readMat("targets4.mat")
TargX <- imager::as.cimg(TargetIms$x)
TargXI <- imager::as.cimg(TargetIms$xi)
TargPI <- imager::as.cimg(TargetIms$pi)
TargP <- imager::as.cimg(TargetIms$p)
remove(TargetIms)
Exp2X <- imager::as.cimg(rowSums(cbind(images$image11, images$image15)))
Exp2P <- imager::as.cimg(rowSums(cbind(images$image12, images$image16)))
Exp2PI <- imager::as.cimg(rowSums(cbind(images$image13, images$image17)))
Exp2XI <- imager::as.cimg(rowSums(cbind(images$image14, images$image18)))
Correct_Target <- matrix(nrow=4, ncol=4)
rownames(Correct_Target) <- c("x","p","xi","pi")
colnames(Correct_Target) <- c("Correct", "High Similarity", "Low Similarity 1", "Low Similarity 2")
#Calculations for 'x' target
Correct_Target['x',1] <- cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['x',2] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['x',3] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['x',4] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
#Calculations for 'p' target
Correct_Target['p',4] <- cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['p',3] <-cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['p',2] <-cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['p',1] <-cor(as.vector(imager::isoblur(Exp2P, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
#Calculations for 'xi' target
Correct_Target['xi',2] <- cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['xi',1] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['xi',3] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['xi',4] <-cor(as.vector(imager::isoblur(Exp2X, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
#Calculations for 'pi' target
Correct_Target['pi',4] <- cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargX[,,1,1]))
Correct_Target['pi',3] <-cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargXI[,,1,1]))
Correct_Target['pi',1] <-cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargPI[,,1,1]))
Correct_Target['pi',2] <-cor(as.vector(imager::isoblur(Exp2PI, sigma = 4, gaussian = T)[,,1,1]), as.vector(TargP[,,1,1]))
Backwards_prediction_accuracy <- matrix(nrow=2,ncol=3)
colnames(Backwards_prediction_accuracy) <- c("Correct Target", "High Similarity Target", "Low Similarity Target")
rownames(Backwards_prediction_accuracy) <- c("Mean", "SD")
Backwards_prediction_accuracy[,"Correct Target"] <- c(mean(Correct_Target[,1]),sd(Correct_Target[,1]))
Backwards_prediction_accuracy[,"High Similarity Target"] <- c(mean(Correct_Target[,2]),sd(Correct_Target[,2]))
Backwards_prediction_accuracy[,"Low Similarity Target"] <- c(mean(Correct_Target[,3:4]),sd(Correct_Target[,3:4]))
View(Backwards_prediction_accuracy)
View(Correct_Target)
